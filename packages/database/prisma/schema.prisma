// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model SubscriptionLevel {
  levelName         String  @id
  requestsPerSecond Int     @default(5)
  apis              Int     @default(1)
  endpoints         Int     @default(3)
  returnTypes       Int     @default(3)
  typeGeneration    Boolean @default(false)
  authTypes         Boolean @default(false)
}

model User {
  id           Int          @id @default(autoincrement())
  username     String       @unique
  password     String
  subscription String       @default("FREE") // should be one of ['FREE', 'BASIC', 'PREMIUM', 'ENTERPRISE']
  apis         Api[]
  returnTypes  ReturnType[]
  authModel    AuthModel[]
}

model AuthModel {
  id           Int    @id @default(autoincrement())
  type         String @default("jwt")
  primaryKey   String @default("username")
  primaryValue String @default("admin")
  password     String @default("$2b$10$1MzcSVXa0c6EYMPVc7RHNOxmUewHWGMeEFiO5CC5aX7ycZQeX0mn.")

  apis   Api[]
  user   User  @relation(fields: [userId], references: [id])
  userId Int

  @@unique([userId, type, primaryValue])
  @@index([userId, type, primaryValue])
}

model Api {
  id       Int    @id @default(autoincrement())
  name     String
  nickname String

  user      User       @relation(fields: [userId], references: [id])
  userId    Int
  endpoints Endpoint[]

  authModel   AuthModel? @relation(fields: [authModelId], references: [id])
  authModelId Int?
  usage       ApiUsage[]

  @@unique([userId, nickname])
  @@index([nickname])
  @@index([userId])
  @@index([userId, id])
  @@index([userId, nickname])
}

model ReturnProperty {
  id    Int     @id @default(autoincrement())
  name  String
  type  String
  value String?

  isArray Int @default(0)

  returnType   ReturnType? @relation(fields: [returnTypeId], references: [id])
  returnTypeId Int?

  @@unique([name, returnTypeId])
}

model ReturnType {
  id         Int              @id @default(autoincrement())
  name       String
  properties ReturnProperty[]

  user   User @relation(fields: [userId], references: [id])
  userId Int

  endpoints Endpoint[]

  @@unique([name, userId])
}

model Endpoint {
  id   Int    @id @default(autoincrement())
  path String

  isArray Int @default(0)

  returnType   ReturnType @relation(fields: [returnTypeId], references: [id])
  returnTypeId Int

  api   Api        @relation(fields: [apiId], references: [id])
  apiId Int
  usage ApiUsage[]

  @@unique([apiId, path])
}

model ApiUsage {
  id           Int      @id @default(autoincrement())
  method       String // The HTTP method (GET, POST, PUT, DELETE, etc.)
  timestamp    DateTime @default(now()) // When the request was made
  statusCode   Int // The HTTP status code returned
  responseTime Int // Time taken to process the request (in milliseconds)
  dataLength   Int // The length of the data returned (in bytes)
  ipAddress    String? // IP address of the client making the request

  // Relations
  api      Api      @relation(fields: [apiId], references: [id])
  endpoint Endpoint @relation(fields: [endpointId], references: [id])

  apiId      Int
  endpointId Int

  @@index([apiId])
  @@index([endpointId])
  @@index([ipAddress])
  @@index([statusCode])
  @@index([method])
}
